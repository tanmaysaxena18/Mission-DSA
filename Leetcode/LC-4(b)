from collections import deque
from typing import List
class Solution:
    def shortestSubarray(self, nums: List[int], k: int) -> int:
        n = len(nums)
        prefix = [0] * (n + 1)  
        #Ek prefix sum array banate hain jisme hum cumulative sum store karenge.
        for i in range(n):
            prefix[i+1] = prefix[i] + nums[i] 
            #Har element ke saath prefix sum update karo taaki poora cumulative array ready ho jaye.
        
        dq = deque()  
        #Yeh deque un indices ko store karega jinke prefix sum ascending order mein hain.
        
        ans = float("inf")  
        #Answer ko shuru mein infinity se set karo, taki valid subarray milne par woh update ho sake.
        
        for i in range(n + 1):
            #While the difference between current prefix and the smallest prefix in dq is at least k, update answer.
            while dq and prefix[i] - prefix[dq[0]] >= k:
                ans = min(ans, i - dq[0])
                dq.popleft()  #
                #Jab condition satisfy ho, answer update karo aur dq se index hata do.
            
            # Remove indices from dq that have a higher prefix value than the current one.
            while dq and prefix[i] <= prefix[dq[-1]]:
                dq.pop()
                #Inefficient indices ko hata do taaki deque monotonic increasing rahe.
            dq.append(i)  
            #Current index ko dq mein add karo future ke liye.
        
        #Return the result if found; else return -1.
        return ans if ans != float("inf") else -1
        #Agar answer abhi bhi infinity hai matlab valid subarray nahi mila, warna minimal length return karo.
